Origin: https://github.com/apache/httpd/commit/bf91e089a09ddeaab17cf9e97558f2aa29cf7eca
Origin: https://github.com/apache/httpd/commit/496c863776c68bd08cdbeb7d8fa5935ba63b76c2
Origin: https://github.com/apache/httpd/commit/d4901cb32133bc0e59ad193a29d1665597080d67
Origin: https://github.com/apache/httpd/commit/6e768a811c59ca6a0769b72681aaef381823339f
Origin: https://github.com/apache/httpd/commit/81a8b0133b46c4cf7dfc4b5476ad46eb34aa0a5c
Reviewed-by: Sylvain Beucler <beuc@debian.org>
Last-Update: 2021-10-02

From bf91e089a09ddeaab17cf9e97558f2aa29cf7eca Mon Sep 17 00:00:00 2001
From: Eric Covener <covener@apache.org>
Date: Wed, 14 Jan 2015 13:28:00 +0000
Subject: [PATCH] Merge the following revisions from trunk:

     trunk patch: http://svn.apache.org/r1588544 (rewrite+UDS)
                  http://svn.apache.org/r1641636 ('using default worker' msg tweak)
                  http://svn.apache.org/r1647005 (tcp reuse)
                  http://svn.apache.org/r1647009 (uds reuse)
                  http://svn.apache.org/r1647334 (uds reuse fix)


    + 1 additional de_socketfy call in mod_proxy





git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1651662 13f79535-47bb-0310-9956-ffa450edef68
---
 CHANGES                            | 11 +++++
 docs/manual/mod/mod_proxy.xml      |  6 +++
 docs/manual/mod/mod_proxy_fcgi.xml | 29 ++++++------
 include/ap_mmn.h                   |  3 +-
 modules/mappers/mod_rewrite.c      |  1 -
 modules/proxy/mod_proxy.c          | 30 +++++++-----
 modules/proxy/mod_proxy.h          |  8 ++++
 modules/proxy/mod_proxy_fcgi.c     | 12 +++--
 modules/proxy/proxy_util.c         | 73 ++++++++++++++++--------------
 9 files changed, 106 insertions(+), 67 deletions(-)

From 496c863776c68bd08cdbeb7d8fa5935ba63b76c2 Mon Sep 17 00:00:00 2001
From: Yann Ylavic <ylavic@apache.org>
Date: Fri, 3 Sep 2021 16:52:38 +0000
Subject: [PATCH] Merge r1892814, r1892853 from trunk:

mod_proxy: Faster unix socket path parsing in the "proxy:" URL.

The actual r->filename format is "[proxy:]unix:path|url" for UDS, no need to
strstr(,"unix:") since it's at the start of the string.


mod_proxy: Follow up to r1892814.

Save some few cycles in ap_proxy_de_socketfy() too.


Submitted by: ylavic
Reviewed by: ylavic, covener, rpluem


git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1892874 13f79535-47bb-0310-9956-ffa450edef68
---
 changes-entries/fix_uds_filename.txt | 2 ++
 modules/proxy/mod_proxy.c            | 2 +-
 modules/proxy/proxy_util.c           | 4 ++--
 3 files changed, 5 insertions(+), 3 deletions(-)
 create mode 100644 changes-entries/fix_uds_filename.txt

From d4901cb32133bc0e59ad193a29d1665597080d67 Mon Sep 17 00:00:00 2001
From: Ruediger Pluem <rpluem@apache.org>
Date: Wed, 8 Sep 2021 07:00:09 +0000
Subject: [PATCH] Merge r1892986, r1892987 from trunk:

mod_proxy: Follow up to r1892814.

* modules/proxy/proxy_util.c(fix_uds_filename):
  Sanity checks on the configured UDS path, fail with 500 if invalid since
  continuing through proxy processing wouldn't work as expected.



mod_proxy: Follow up to r1892986: APLOGNO()

Stefan get out of this body! :)


Submitted by: ylavic
Reviewed by: rpluem, ylavic, covener

Github: closes #265


git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1893101 13f79535-47bb-0310-9956-ffa450edef68
---
 STATUS                     |  9 -------
 modules/proxy/proxy_util.c | 55 +++++++++++++++++++++++---------------
 2 files changed, 34 insertions(+), 30 deletions(-)

From 6e768a811c59ca6a0769b72681aaef381823339f Mon Sep 17 00:00:00 2001
From: Stefan Eissing <icing@apache.org>
Date: Thu, 23 Sep 2021 12:29:03 +0000
Subject: [PATCH] Merge of r1893516 from trunk:

   *) mod_rewrite: Fix UDS ("unix:") scheme for [P] rules.  PR 57691 + 65590.



git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1893556 13f79535-47bb-0310-9956-ffa450edef68
---
 changes-entries/rewrite_uds.txt | 2 ++
 modules/mappers/mod_rewrite.c   | 7 +++++++
 2 files changed, 9 insertions(+)
 create mode 100644 changes-entries/rewrite_uds.txt

From 81a8b0133b46c4cf7dfc4b5476ad46eb34aa0a5c Mon Sep 17 00:00:00 2001
From: Stefan Eissing <icing@apache.org>
Date: Thu, 23 Sep 2021 12:31:53 +0000
Subject: [PATCH] backport of 1893519,1893532 from trunk:

  *) mod_proxy: Handle UDS URIs with empty hostname ("unix:///...") as if they
     had no hostname ("unix:/..."), also in mod_rewrite's is_absolulte_uri().



git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/branches/2.4.x@1893559 13f79535-47bb-0310-9956-ffa450edef68
---
 changes-entries/uds_empty_hostname.txt | 2 ++
 modules/mappers/mod_rewrite.c          | 2 +-
 modules/proxy/proxy_util.c             | 3 ++-
 3 files changed, 5 insertions(+), 2 deletions(-)
 create mode 100644 changes-entries/uds_empty_hostname.txt

Index: apache2-2.4.10/modules/proxy/proxy_util.c
===================================================================
--- apache2-2.4.10.orig/modules/proxy/proxy_util.c
+++ apache2-2.4.10/modules/proxy/proxy_util.c
@@ -1894,6 +1894,50 @@ static int ap_proxy_retry_worker(const c
     }
 }
 
+/*
+ * In the case of the reverse proxy, we need to see if we
+ * were passed a UDS url (eg: from mod_proxy) and adjust uds_path
+ * as required.  
+ */
+static int fix_uds_filename(request_rec *r, char **url) 
+{
+    char *uds_url = r->filename + 6, *origin_url;
+
+    if (!strncmp(r->filename, "proxy:", 6) &&
+            !strncasecmp(uds_url, "unix:", 5) &&
+            (origin_url = ap_strchr(uds_url + 5, '|'))) {
+        char *uds_path = NULL;
+        apr_size_t url_len;
+        apr_uri_t urisock;
+        apr_status_t rv;
+
+        *origin_url = '\0';
+        rv = apr_uri_parse(r->pool, uds_url, &urisock);
+        *origin_url++ = '|';
+
+        if (rv == APR_SUCCESS && urisock.path && (!urisock.hostname
+                                                  || !urisock.hostname[0])) {
+            uds_path = ap_runtime_dir_relative(r->pool, urisock.path);
+        }
+        if (!uds_path) {
+            ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(10292)
+                    "Invalid proxy UDS filename (%s)", r->filename);
+            return 0;
+        }
+        apr_table_setn(r->notes, "uds_path", uds_path);
+
+        /* Remove the UDS path from *url and r->filename */
+        url_len = strlen(origin_url);
+        *url = apr_pstrmemdup(r->pool, origin_url, url_len);
+        memcpy(uds_url, *url, url_len + 1);
+
+        ap_log_rerror(APLOG_MARK, APLOG_TRACE2, 0, r,
+                "*: rewrite of url due to UDS(%s): %s (%s)",
+                uds_path, *url, r->filename);
+    }
+    return 1;
+}
+
 PROXY_DECLARE(int) ap_proxy_pre_request(proxy_worker **worker,
                                         proxy_balancer **balancer,
                                         request_rec *r,
@@ -1929,8 +1973,6 @@ PROXY_DECLARE(int) ap_proxy_pre_request(
         }
         else if (r->proxyreq == PROXYREQ_REVERSE) {
             if (conf->reverse) {
-                char *ptr;
-                char *ptr2;
                 ap_log_rerror(APLOG_MARK, APLOG_TRACE2, 0, r,
                               "*: found reverse proxy worker for %s", *url);
                 *balancer = NULL;
@@ -1942,35 +1984,8 @@ PROXY_DECLARE(int) ap_proxy_pre_request(
                  * regarding the Connection header in the request.
                  */
                 apr_table_setn(r->subprocess_env, "proxy-nokeepalive", "1");
-                /*
-                 * In the case of the generic reverse proxy, we need to see if we
-                 * were passed a UDS url (eg: from mod_proxy) and adjust uds_path
-                 * as required.
-                 *
-                 * NOTE: Here we use a quick note lookup, but we could also
-                 * check to see if r->filename starts with 'proxy:'
-                 */
-                if (apr_table_get(r->notes, "rewrite-proxy") &&
-                    (ptr2 = ap_strcasestr(r->filename, "unix:")) &&
-                    (ptr = ap_strchr(ptr2, '|'))) {
-                    apr_uri_t urisock;
-                    apr_status_t rv;
-                    *ptr = '\0';
-                    rv = apr_uri_parse(r->pool, ptr2, &urisock);
-                    if (rv == APR_SUCCESS) {
-                        char *rurl = ptr+1;
-                        char *sockpath = ap_runtime_dir_relative(r->pool, urisock.path);
-                        apr_table_setn(r->notes, "uds_path", sockpath);
-                        *url = apr_pstrdup(r->pool, rurl); /* so we get the scheme for the uds */
-                        /* r->filename starts w/ "proxy:", so add after that */
-                        memmove(r->filename+6, rurl, strlen(rurl)+1);
-                        ap_log_rerror(APLOG_MARK, APLOG_TRACE2, 0, r,
-                                      "*: rewrite of url due to UDS(%s): %s (%s)",
-                                      sockpath, *url, r->filename);
-                    }
-                    else {
-                        *ptr = '|';
-                    }
+                if (!fix_uds_filename(r, url)) {
+                    return HTTP_INTERNAL_SERVER_ERROR;
                 }
             }
         }
Index: apache2-2.4.10/modules/mappers/mod_rewrite.c
===================================================================
--- apache2-2.4.10.orig/modules/mappers/mod_rewrite.c
+++ apache2-2.4.10/modules/mappers/mod_rewrite.c
@@ -604,6 +604,13 @@ static unsigned is_absolute_uri(char *ur
             return 6;
         }
         break;
+
+    case 'u':
+    case 'U':
+        if (!strncasecmp(uri, "nix:", 4)) {        /* unix:     */
+            *sqs = 1;
+            return (uri[4] == '/' && uri[5] == '/') ? 7 : 5;
+        }
     }
 
     return 0;
